# Runs tests referencing the local GitHub Action to verify it works as intended.
---
name: Test

on:
  pull_request:
  push:
    branches-ignore:
      - "dependabot/**"
      - "pre-commit-ci-update-config"
    tags: ["**"]
  workflow_dispatch:

jobs:
  test_install_k3s:
    runs-on: ubuntu-latest
    name: Test K3s and Helm
    strategy:
      fail-fast: false
      matrix:
        include:
          - k3s-version: ""
            k3s-channel: latest
            helm-version: ""
          - k3s-version: ""
            k3s-channel: stable
            helm-version: v3.6.3
          - k3s-version: ""
            k3s-channel: v1.18
            helm-version: v3.3.4
          - k3s-version: v1.17.13+k3s1
            k3s-channel: ""
            helm-version: v3.2.4
    steps:
      - uses: actions/checkout@v3
      - name: Local action
        id: k3s
        uses: ./
        with:
          k3s-version: ${{ matrix.k3s-version }}
          k3s-channel: ${{ matrix.k3s-channel }}
          helm-version: ${{ matrix.helm-version }}
          metrics-enabled: true
          traefik-enabled: true
          docker-enabled: false

      - name: Action's set outputs and env
        run: |
          echo "KUBECONFIG=${KUBECONFIG}"
          echo "kubeconfig=${{ steps.k3s.outputs.kubeconfig }}"
          echo "k3s-version=${{ steps.k3s.outputs.k3s-version }}"
          echo "k8s-version=${{ steps.k3s.outputs.k8s-version }}"
          echo "calico-version=${{ steps.k3s.outputs.calico-version }}"
          echo "helm-version=${{ steps.k3s.outputs.helm-version }}"
          echo "---"

          EXIT=0
          if [[ -z "${KUBECONFIG}" ]]; then
              echo "KUBECONFIG not set as an environment variable"
              EXIT=1
          fi
          if [[ -z "${{ steps.k3s.outputs.kubeconfig }}" ]]; then
              echo "kubeconfig not set as an action output"
              EXIT=1
          fi
          if [[ "${{ steps.k3s.outputs.k3s-version }}" != v* ]]; then
              echo "k3s-version not set correctly as an action output"
              EXIT=1
          fi
          if [[ "${{ steps.k3s.outputs.k8s-version }}" != v* ]]; then
              echo "k8s-version not set correctly as an action output"
              EXIT=1
          fi
          if [[ "${{ steps.k3s.outputs.calico-version }}" != v* ]]; then
              echo "calico-version not set correctly as an action output"
              EXIT=1
          fi
          if [[ "${{ steps.k3s.outputs.helm-version }}" != v* ]]; then
              echo "helm-version not set correctly as an action output"
              EXIT=1
          fi

          exit $EXIT

      - name: Information from kubectl
        run: |
          kubectl version
          kubectl get storageclass
          kubectl get deploy,daemonset,pods --all-namespaces
          # These options should be enabled
          kubectl get --namespace kube-system deploy metrics-server
          kubectl get --namespace kube-system deploy traefik

      - name: Information from helm
        run: |
          helm version
          helm list

          if helm version 2>&1 | grep WARNING > /dev/null; then
              echo "helm is expected to run without a WARNING!"
              exit 1
          fi

      - name: Install network policies test
        run: helm install test-calico ./test-calico --wait

      - name: Run network policies test
        run: helm test test-calico --logs

      # GitHub Action reference: https://github.com/jupyterhub/action-k8s-namespace-report
      - name: Kubernetes namespace report
        if: always()
        uses: jupyterhub/action-k8s-namespace-report@v1
        with:
          # NOTE: This modifies the kubeconfig's current context's default
          #       namespace as of v1.0.1...
          namespace: kube-system

  test_install_k3s_options:
    runs-on: ubuntu-latest
    name: Test K3s options
    steps:
      - uses: actions/checkout@v3
      - name: Local action
        id: k3s
        uses: ./
        with:
          k3s-version: ""
          k3s-channel: ""
          helm-version: ""
          metrics-enabled: false
          traefik-enabled: false
          docker-enabled: true

      - name: Kubectl
        run: |
          kubectl version
          kubectl get deploy,daemonset,pods --all-namespaces
          kubectl get --namespace kube-system deploy metrics-server || ret=$?
          if [ $ret -eq 0 ]; then
            echo "ERROR: metrics-server should be disabled"
            exit 1
          fi
          kubectl get --namespace kube-system deploy traefik || ret=$?
          if [ $ret -eq 0 ]; then
            echo "ERROR: traefik should be disabled"
            exit 1
          fi
          docker info
          docker ps

  # Provides a single status_all check that can be used in GitHub branch
  # protection rules instead of having to list each matrix job
  # https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  status_all:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Status matrix Test
    needs:
      - test_install_k3s
      - test_install_k3s_options
    steps:
      - name: Check build matrix status
        if: ${{ needs.test_install_k3s.result != 'success' }}
        run: exit 1
